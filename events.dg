import '/asyncio'
import '/collections'


EventSystem = subclass object where
  #: An object that allows starting async tasks in response to an event.
  #:
  #: loop  :: EventLoop
  #: slots :: dict str [Either (a -> bool) (Future a)]
  #: tasks :: set (Task a)
  #:
  __init__ = loop: None ~>
    @loop  = loop or asyncio.get_event_loop!
    @slots = collections.defaultdict list
    @tasks = set!
    (super EventSystem self).__init__!

  #: Start a task bound to this system. Tasks started with this method are guaranteed
  #: to finish (or be cancelled) before this object becomes unusable.
  #:
  #: async :: (coroutine a) -> Task a
  #:
  async = coro ~>
    task = asyncio.async coro loop: @loop
    task.add_done_callback @tasks.discard
    @tasks.add task
    task

  #: Wait until all running tasks are finished.
  #:
  #: join :: a
  #:
  join = ~> for task in list @tasks => not task.done! =>
    task._blocking = True
    except err => yield task
           err :: asyncio.CancelledError =>

  #: Stop all tasks bound to this system. This cancels all running `async` tasks
  #: and `Future`s that are connected to events. `yield from` to wait until they
  #: finish, too.
  #:
  #: close :: -> coroutine a
  #:
  close = self ->
    for task in @tasks => task.cancel!
    @join

  #: Cancel a task if it does not finish in time.
  #:
  #: timelimit :: float (coroutine a) -> coroutine a
  #:
  timelimit = timeout coro ~>
    task   = @async coro
    handle = @loop.call_later timeout task.cancel
    except _       => yield from task
           finally => handle.cancel!

  #: Add an event handler. It will be called after all event handlers that have
  #: a lower `ordering`; if the handler returns `True`, no other
  #: handlers are called for this event.
  #:
  #: connect :: str (a -> Either bool (coroutine bool)) (Optional int) -> b
  #:
  connect = name callback ordering: 0 ~>
    nope = for (index, (p, _)) in enumerate (@slots !! name) => p >= ordering => break!
    nope => index = len (@slots !! name)
    (@slots !! name).insert index (ordering, callback)

  #: Remove a previously added event handler. No-op if this handler
  #: is not bound to an event.
  #:
  #: disconnect :: str (a -> Either bool (coroutine bool)) -> c
  #:
  disconnect = name callback ~>
    nope = for (index, (_, cb)) in enumerate (@slots !! name) => cb == callback => break!
    nope or (@slots !! name).pop index

  #: Call handlers for an event in order, stop at the first one that returns True.
  #: Returns True iff one of the handlers returned True.
  #:
  #: emit :: str (Optional a) -> coroutine bool
  #:
  emit = name arg: None ~>
    not $ for (_, slot) in @slots !! name =>
      res = except
        err => slot arg
        err :: asyncio.futures.InvalidStateError => False
      res :: asyncio.Future or asyncio.iscoroutine res => res = yield from res
      res => break!

  #: Wait until an event is fired.
  #:
  #: wait_for :: str (Optional int) -> coroutine a
  #:
  wait_for = name ordering: 0 ~>
    waiter = asyncio.Future loop: @loop
    @tasks.add waiter
    @connect name waiter.set_result ordering
    except _       => yield from waiter
           finally =>
             @disconnect name waiter.set_result
             @tasks.remove waiter
