import '/asyncio'
import '/datetime/datetime'

import 'util'
import 'xmlio'
import 'xmlio/Node'

NS_CLIENT  = 'jabber:client'
NS_STREAM  = 'http://etherx.jabber.org/streams'
NS_TLS     = 'urn:ietf:params:xml:ns:xmpp-tls'
NS_SASL    = 'urn:ietf:params:xml:ns:xmpp-sasl'
NS_BIND    = 'urn:ietf:params:xml:ns:xmpp-bind'
NS_SESSION = 'urn:ietf:params:xml:ns:xmpp-session'
NS_STANZAS = 'urn:ietf:params:xml:ns:xmpp-stanzas'
NS_DELAY   = 'urn:xmpp:delay'


_maybe_text_of = node -> if
  node      => (node !! 0).text
  otherwise => None


XMPPError = subclass Exception where
  #: An `iq`/`presence`/`message` with a type of `error`.
  #:
  #: node  :: Element -- the node that contains the error.
  #: error :: Element -- the `{jabber:client}error` element itself.
  #:
  __init__ = node ~>
    @node  = node
    @error = not $ node is None => node.findall ('./{%s}error' % NS_CLIENT)
    @error = head @error
    (super XMPPError self).__init__ node

  __str__ = self -> (@error !! 0).tag


XMPPElement = subclass object where
  __getattr__ = name ~> getattr @_node name
  __init__    = node ~>
    @_time = datetime.utcnow!
    @_node = node
    None

  #: Convert this stanza to a different type.
  #:
  #: as :: (type a) -> a
  #:
  as = t ~> self where @__class__ = t

  #: The sender of this stanza.
  #:
  #: from :: JabberID
  #:
  from = ~> JabberID $ @get 'from'

  #: The unique ID assigned to this request/response.
  #:
  #: id :: Maybe str
  #:
  id = ~> @get 'id'

  #: The type of this stanza: get, set, result, error.
  #:
  #: type :: Maybe str
  #:
  type = ~> @get 'type'

  #: When this stanza was sent. Unlike `time`, this is `None` if it was received instantly.
  #:
  #: delay :: Maybe datetime
  #:
  delay = ~>
    node = @findall $ './{%s}delay' % NS_DELAY
    if node      => datetime.strptime ((node !! 0).get 'stamp') '%Y-%m-%dT%H:%M:%SZ'
       otherwise => None

  #: When this stanza was sent (not received.)
  #:
  #: time :: datetime
  #:
  time = ~> @delay or @_time

  ismessage  = ~> @tag == '{%s}message'  % NS_CLIENT
  ispresence = ~> @tag == '{%s}presence' % NS_CLIENT
  isiq       = ~> @tag == '{%s}iq'       % NS_CLIENT


XMPPMessage = subclass XMPPElement where
  body    = ~> _maybe_text_of $ @findall $ './{%s}body'    % NS_CLIENT
  subject = ~> _maybe_text_of $ @findall $ './{%s}subject' % NS_CLIENT


XMPPPresence = subclass XMPPElement where
  #: The type of this presence: error, (un)available, dnd, busy, something else.
  #:
  #: type :: str
  #:
  type = ~> @get 'type' 'available'

  #: A user-specified status string.
  #:
  #: status :: Maybe str
  #:
  status = ~> _maybe_text_of $ @findall $ './{%s}status' % NS_CLIENT

  #: Whether the entity that sent this node is still available.
  #:
  #: online :: bool
  #:
  online = ~> @type != 'unavailable'


JabberID = subclass object where
  __init__ = @host @user: None @resource: None ~>
    '@' in @host => @user, _, @host     = @host.partition '@'
    '/' in @host => @host, _, @resource = @host.partition '/'
    None

  bare = ~> if
    @user     => '{}@{}'.format @user @host
    otherwise => @host

  full = ~> if
    @resource => '{}@{}/{}'.format @user @host @resource
    otherwise => @bare

  __str__ = self -> @full


Client = subclass xmlio.XMLProtocol where
  __init__ = @self loop: None ~>
    (super Client self).__init__ loop: loop root:
      'stream:stream xmlns="%s" xmlns:stream="%s" version="1.0" to="%s"' %
        (NS_CLIENT, NS_STREAM, @self.host)

    @ext = (subclass object)! where
    @connect 'node'     @_slot_node     999
    @connect 'iq'       @_slot_iq       999
    @connect 'message'  @_slot_message  999
    @connect 'presence' @_slot_presence 999
    None

  #: Load an extension from a given module.
  #:
  #: extend :: { .init :: Client -> object } -> a
  #:
  extend = module ~> except
    err             => @ext.__dict__ !! module.init.__name__
    err :: KeyError => @ext.__dict__ !! module.init.__name__ = module.init self

  #: Handle an arbitrary stanza.
  #:
  #: _slot_node :: Element -> coroutine bool
  #:
  _slot_node = asyncio.coroutine $ node ~>
    node = XMPPElement node
    if node.ismessage  => yield from $ @emit 'message'  $ node.as XMPPMessage
       node.ispresence => yield from $ @emit 'presence' $ node.as XMPPPresence
       node.isiq       => if
         node.type == 'result' => yield from $ @emit ('response-%s' % node.id) node
         node.type == 'error'  => yield from $ @emit ('response-%s' % node.id) node
         otherwise             => yield from $ @emit 'iq' node
       node.tag == '{%s}features' % NS_STREAM =>
         @features = node
         @_has_tls     = @features.findall $ './{%s}starttls'   % NS_TLS
         @_has_bind    = @features.findall $ './{%s}bind'       % NS_BIND
         @_has_session = @features.findall $ './{%s}session'    % NS_SESSION
         @_has_sasl    = @features.findall $ './/{%s}mechanism' % NS_SASL
         yield from $ @emit 'ready'

  #: Handle an `iq` request (by replying with an error.)
  #:
  #: _slot_iq :: Element -> coroutine bool
  #:
  _slot_iq = asyncio.coroutine $ node ~>
    yield from $ @respond node $ Node 'iq' type: 'error' $
      Node 'error' type: 'cancel' $ Node 'service-unavailable' xmlns: NS_STANZAS
    True

  #: Dispatch a message, first by type, then by sender, then by type and sender.
  #:
  #: Valid XMPP message types:
  #:   headline  -- a single message which should not be replied to.
  #:   normal    -- a single message which may be replied to.
  #:   chat      -- a one-on-one conversation.
  #:   groupchat -- a multi-user conversation.
  #:
  #: _slot_message :: Element -> coroutine bool
  #:
  _slot_message = node ~>
    jid, t = node.from, node.type
    task0 = @emit ('message-%s' % t) node
    task1 = @emit (sgn1 = 'message-%s'    % jid.bare) node
    task2 = @emit (sgn2 = 'message-%s'    % jid.full) node
    task3 = @emit (sgn3 = 'message-%s-%s' % (t, jid.bare)) node
    task4 = @emit (sgn4 = 'message-%s-%s' % (t, jid.full)) node
    yield from task0 or yield from task1 or (sgn1 != sgn2 => yield from task2) or
                        yield from task3 or (sgn3 != sgn4 => yield from task4)

  #: Dispatch a presence by sender.
  #:
  #: _slot_presence :: Element -> coroutine a
  #:
  _slot_presence = node ~>
    jid = node.from
    task1 = @emit (sgn1 = 'presence-%s' % jid.bare) node
    task2 = @emit (sgn2 = 'presence-%s' % jid.full) node
    yield from task1 or (sgn1 != sgn2 => yield from task2)

  #: Wait until a response to an `iq` request, which is assigned a random ID.
  #:
  #: request :: (Either Node Element) -> coroutine Element
  #:
  request = node ~>
    not $ node.tag == 'iq' => raise $ ValueError 'can only request with `iq`s'
    not $ node.get 'id'    => node.set 'id' $ util.randstring 10
    yield from $ @send node
    reply = yield from $ @wait_for $ 'response-%s' % node.get 'id'
    reply.type == 'error' => raise $ XMPPError reply
    reply

  #: Create a `message`. Either use with `respond` or set `to` manually.
  #:
  #: message :: str (Optional str) -> Node
  #:
  message = body type: 'chat' ~> Node 'message' type: type $ Node 'body' body

  #: Respond to an `iq`/`message` node.
  #:
  #: respond :: XMPPElement Element -> coroutine a
  #:
  respond = request response ~>
    response.set 'id' $ request.id or ''
    response.set 'to' $ request.from.full
    @send response

  #: XMPP handshake, part 1: TLS.
  #:
  #: starttls :: (Maybe SSLContext) -> coroutine a
  #:
  starttls = context ~>
    @_has_tls =>
      yield from $ @send $ Node 'starttls' xmlns: NS_TLS
      while True =>
        result = yield from $ @wait_for 'node'
        result.tag == '{%s}proceed' % NS_TLS => break!
        result.tag == '{%s}failure' % NS_TLS => raise $ ConnectionError 'TLS request denied'

      waiter = asyncio.Future loop: @loop
      @loop._make_ssl_transport (@writer.transport.get_extra_info 'socket') self context waiter
      yield from waiter
      yield from $ @wait_for 'ready'

  #: XMPP handshake, part 2: authentication. Must be done using one of the protocols
  #: in `features`.
  #:
  #: auth :: str -> coroutine a
  #:
  auth = password ~>
    ms = list (where for m in @_has_sasl => m.text in @auth.methods => yield m.text)
    ms or raise (ConnectionError 'no supported SASL method available')

    gen = (@auth.methods !! last ms) self password
    msg = Node 'auth' mechanism: (last ms) xmlns: NS_SASL $ util.base64e $ next gen
    while not $ msg is None =>
      yield from $ @send msg
      while True =>
        rsp = yield from $ @wait_for 'node'
        msg = if
          rsp.tag == '{%s}success'   % NS_SASL =>
          rsp.tag == '{%s}failure'   % NS_SASL => raise $ PermissionError user
          rsp.tag == '{%s}challenge' % NS_SASL => Node 'response' xmlns: NS_SASL $ except
            err => util.base64e $ gen.send $ util.base64d challenge.text
            err :: StopIteration => raise $ RuntimeError 'could not handle a challenge'
            finally => err => yield from $ @send $ Node 'abort' xmlns: NS_SASL
          otherwise => continue!
        break!

    @connection_made @writer.transport
    yield from $ @wait_for 'ready'

  auth.methods = dict'
    'PLAIN', password ~> yield $ '\0%s\0%s' % (@self.user, password)
    #'DIGEST-MD5',  password ~>
    #'SCRAM-SHA-1', password ~>

  #: XMPP handshake, part 3: bind to a resource, receive an ID, start a session.
  #:
  #: bind :: str -> a
  #:
  bind = ~>
    not @_has_bind    => raise $ ConnectionError '`bind` not supported by server'
    not @_has_session => raise $ ConnectionError '`session` not supported by server'
    # XXX this returns a node that contains our JID; might want to replace `@self` with it.
    yield from $ @request $ Node 'iq' type: 'set' $ Node 'bind' xmlns: NS_BIND $ Node 'resource' @self.resource
    yield from $ @request $ Node 'iq' type: 'set' $ Node 'session' xmlns: NS_SESSION


#: Connect to an XMPP server as a client.
#:
#: client :: JabberID str (Optional str) (Optional int) ** -> coroutine Client
#:
client = jid password port: 5222 loop: None ssl: True **: k ->
  loop  = loop or asyncio.get_event_loop!
  proto = snd $ yield from $ loop.create_connection (-> Client jid loop) jid.host port **: k
  yield from $ proto.wait_for 'ready'
  yield from $ proto.starttls $ if (ssl :: bool => None) (otherwise => ssl)
  yield from $ proto.auth password
  yield from $ proto.bind
  proto
