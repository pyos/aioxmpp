import '/asyncio'
import '/logging'
import '/xml/sax/saxutils/quoteattr'

except
  err =>
    import '/lxml/etree'
    Element     = etree._Element
    ElementBase = etree.ElementBase

    _set_parser_element_class = parser cls ->
      parser.set_element_class_lookup $ etree.ElementDefaultClassLookup cls
  err :: ImportError =>
    etree = import '/xml/etree/ElementTree'

    Element     = etree.Element
    ElementBase = etree.Element

    _set_parser_element_class = parser cls ->
      parser._parser._target = parser._parser.target = etree.TreeBuilder cls

import 'events/EventSystem'


Node = subclass object where
  # ElementTree nodes tend to screw up namespace information.
  # This node doesn't care.
  __init__ = name *: children **: attrs ~>
    @name     = name
    @attrs    = attrs
    @children = list children
    None

  get = k d: None ~> @attrs.get k d
  set = k v       ~> @attrs !! k = v

  __str__ = self ->
    '<{0}{1}>{2}</{0}>'.format @name
      ''.join $ map ((k, v) -> ' {}={}'.format k $ quoteattr v) @attrs.items!
      ''.join $ map str @children


XMLWriter = subclass asyncio.StreamWriter where
  #: A XML stanza-based protocol. The stream begins with a root node, `<stream>`,
  #: followed by an arbitrary amount of nodes. The stream may end with `</stream>`
  #: if it was closed gracefully.
  #:
  #: root :: str -- the name of the root tag, e.g. `stream:stream` in XMPP.
  #:
  __init__ = @root: 'stream' *: a **: k ~>
    (super XMLWriter self).__init__ *: a **: k
    @write $ b'<?xml version="1.0" encoding="utf-8"?>'
    @write $ b'<' + @root.encode 'utf-8' + b'>'
    @_closed = False
    None

  #: Send a single stanza. `yield from` the result of this method to wait until
  #: everything is 100% sent to the other side.
  #:
  #: send :: (Either Node Element) -> coroutine a
  #:
  send = node ~>
    data = if
      node :: Element => etree.tostring node encoding: 'unicode'
      node :: Node    => str node
      otherwise       => raise $ TypeError 'not an Element/Node'
    @_protocol.log.debug 'SEND %s' data
    @write $ data.encode 'utf-8'
    @drain!

  #: Gracefully close the connection, optionally closing the socket.
  #:
  #: close :: (Optional bool) -> a
  #:
  close = completely: False ~>
    not @_closed =>
      @_closed = True
      @write $ b'</' + (@root.split ' ' !! 0).encode 'utf-8' + b'>'
      if completely => @transport.close!


XMLProtocol = subclass EventSystem asyncio.streams.FlowControlMixin asyncio.Protocol where
  #: A XML stanza-based protocol. Emits a `node` event for every child of a root node.
  #:
  #: loop :: EventLoop
  #: root :: str
  #:
  __init__ = root: 'stream' loop: None ~>
    @loop  = loop or asyncio.get_event_loop!
    @root  = root
    @log   = logging.getLogger 'asyncio.xml'
    (super XMLProtocol self).__init__ loop: loop

  connection_made = transport ~>
    @level     = 0
    @transport = transport
    @writer    = XMLWriter @root transport self None @loop
    @parser    = etree.XMLPullParser ('start', 'end')
    except err => _set_parser_element_class @parser @element_class
           err :: AttributeError =>
    (super XMLProtocol self).connection_made transport

  data_received = data ~>
    except err => @parser.feed data
           err :: Exception => @writer.close True
    for (ev, node) in @parser.read_events! => if
      ev == 'start' => @level += 1
      ev == 'end'   =>
        @level -= 1
        @level == 1 =>
          @log.debug 'RECV %s' $ etree.tostring node encoding: 'unicode'
          @async $ @emit 'node' node
    (super XMLProtocol self).data_received data

  connection_lost = exc ~>
    @close!
    (super XMLProtocol self).connection_lost exc

  #: An alias to `writer.send`.
  #:
  #: send :: typeof XMLWriter.send
  #:
  send = node ~> @writer.send node

  #: An alias to `writer.close`.
  #:
  #: close :: -> a
  #:
  close = self ->
    @writer.close True
    (super XMLProtocol self).close!
