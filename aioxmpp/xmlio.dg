import '/asyncio'
import '/logging'
import '/xml/sax/saxutils/escape'
import '/xml/sax/saxutils/quoteattr'

import '../events/EventSystem'

etree = except
  err => import '/lxml/etree' pure
  err :: ImportError => import '/xml/etree/ElementTree' pure


#: A thin wrapper around `etree.Element` that simplifies creation of nodes.
#:
#: Node :: str *(Either Element str) **str -> Element
#:
Node = name *: children **: attrs ->
  e = etree.Element name attrs
  x = None
  for c in children => if
    c :: str => if
      x is None => e.text = (e.text or '') + c
      otherwise => x.tail = (x.tail or '') + c
    otherwise => e.append (x = c)
  e


XMLProtocol = subclass EventSystem asyncio.streams.FlowControlMixin asyncio.Protocol where
  #: A XML stanza-based protocol. Emits a `node` event for every child of a root node.
  #:
  #: log  :: Logger
  #: loop :: EventLoop
  #: root :: str
  #:
  __init__ = root: 'stream' loop: None ~>
    @loop  = loop or asyncio.get_event_loop!
    @root  = root
    @log   = logging.getLogger 'asyncio.xml'
    (super XMLProtocol self).__init__ loop: loop

  connection_made = transport ~>
    @_level = 0
    @parser = etree.XMLPullParser ('start', 'end')
    @writer = asyncio.StreamWriter transport self None @loop
    @writer.write $ b'<?xml version="1.0" encoding="utf-8"?>'
    @writer.write $ b'<' + @root.encode 'utf-8' + b'>'
    (super XMLProtocol self).connection_made transport

  data_received = data ~>
    except err => @parser.feed data
           err :: Exception =>
             @log.error 'XML parsing error' exc_info: True
             @close!
    for (ev, node) in @parser.read_events! => if
      ev == 'start' =>
        @_level += 1
        @_level == 1 => @_root = node
      ev == 'end' =>
        @_level -= 1
        @_level == 0 => @close!
        @_level == 1 =>
          @log.debug 'RECV %s' $ etree.tostring node encoding: 'unicode'
          @async $ @emit 'node' node
          @_root.clear!
    (super XMLProtocol self).data_received data

  connection_lost = exc ~>
    (super XMLProtocol self).close!  # The transport has already been closed.
    (super XMLProtocol self).connection_lost exc

  #: Send a single stanza. `yield from` the result of this method to wait until
  #: everything is 100% sent to the other side.
  #:
  #: send :: Element -> coroutine a
  #:
  send = node ~>
    data = etree.tostring node
    @log.debug 'SEND %s' $ data.decode 'utf-8' 'surrogateescape'
    @writer.write data
    @writer.drain!

  #: Gracefully close the connection.
  #:
  #: close :: -> a
  #:
  close = self ->
    except err => @writer.write $ b'</' + (@root.split ' ' !! 0).encode 'utf-8' + b'>'
           err :: IOError => # already closed or something
    @writer.close!
