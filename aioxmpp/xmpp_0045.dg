import '/asyncio'
import '/collections'

import 'xmlio/Node'
import 'xmpp'
import 'xmpp/JabberID'
import 'xmpp/XMPPError'
import 'xmpp/NS_CLIENT'
import 'xmpp/NS_DELAY'


name      = 'muc'
namespace = 'http://jabber.org/protocol/muc'


init = subclass object where
  #: XEP-0045: Multi-User Chat
  #:
  #: http://xmpp.org/extensions/xep-0045.html
  #:
  __init__ = @proto ~>
    # @proto.extend $ import 'xmpp_0030'
    # ...
    @proto.connect 'message-groupchat' priority: 999 @_slot_message
    @entered = set!
    None

  #: Dispatch a MUC message.
  #:
  #: _slot_message :: Element -> coroutine bool
  #:
  _slot_message = node ~>
    yield from $ @proto.emit ('message-groupchat-%s' % (JabberID $ node.get 'from').bare) node

  #: Enter a groupchat.
  #:
  #: () :: (Either JabberID str) (Optional str) (Optional int) -> coroutine Room
  #:
  __call__ = room nick password: None history: None ~>
    room = if
      room :: JabberID => JabberID room.bare None nick
      otherwise        => JabberID room      None nick
    room.bare in @entered => raise $ ValueError $ 'room {} already entered'.format room.bare

    node = Node 'x' xmlns: namespace
    not $ password is None => node.children.append $ Node 'password' password
    not $ history  is None => node.children.append $ Node 'history' maxstanzas: (str history)
    yield from $ @proto.send $ Node 'presence' id: @proto.randomid to: room.full node

    # If successful, the server does not send a response. Instead,
    # we need to listen for a non-`error` presence from this room.
    resp = yield from $ @proto.wait_for $ 'presence-%s' % room.bare
    resp.get 'type' == 'error' => raise $ XMPPError $ resp.findall ('{%s}error' % NS_CLIENT) !! 0
    room = Room self room @proto
    yield from $ room._enqueue resp
    room


Room = subclass object where
  #: A single multi-user chat.
  #:
  #: jid   :: JabberID
  #: proto :: Client
  #:
  __init__ = @ext @jid @proto ~>
    @queue  = collections.deque ()
    @waiter = None
    @left   = False
    @proto.connect ('presence-%s'          % @jid.bare) @_enqueue
    @proto.connect ('message-groupchat-%s' % @jid.bare) @_enqueue
    @ext.entered.add @jid.bare
    None

  #: Put the node onto the event queue and wake up those who wait for it.
  #:
  #: _enqueue :: Element -> coroutine bool
  #:
  _enqueue = asyncio.coroutine $ node ~>
    @queue.append $ node.as $ if
      node.ismessage  => MUCMessage
      node.ispresence => MUCPresence
      otherwise       => MUCElement
    @waiter => @waiter.set_result True
    @waiter = None
    if node.get 'from' == @jid.full and node.get 'type' == 'unavailable' =>
      @left = True
      @proto.disconnect ('presence-%s'          % @jid.bare) @_enqueue
      @proto.disconnect ('message-groupchat-%s' % @jid.bare) @_enqueue
      @ext.entered.remove @jid.bare
    True

  #: Fetch the next item from the queue. If there is none, wait until one is received.
  #:
  #: __iter__ :: -> coroutine MUCNode
  #:
  __iter__ = self ->
    while not @queue => yield from $
      @left   => raise GeneratorExit
      @waiter = @waiter or asyncio.Future loop: @proto.loop
    @queue.popleft!

  #: Exit this MUC.
  #:
  #: exit :: (Optional str) -> coroutine a
  #:
  exit = reason: None ~>
    node = Node 'presence' to: @jid.full type: 'unavailable'
    reason => node.children.append $ Node 'status' reason
    yield from $ @proto.send node


MUCElement = subclass xmpp.XMPPElement where
  room = ~> @from.bare
  nick = ~> @from.resource


MUCMessage  = subclass MUCElement xmpp.XMPPMessage  where
MUCPresence = subclass MUCElement xmpp.XMPPPresence where
  status      = ~> raise NotImplementedError
  affiliation = ~> raise NotImplementedError  # NOTE these may not appear
  role        = ~> raise NotImplementedError  #   in every `presence`.
